<?php

namespace FanFerret\QuestionBundle\Repository;

/**
 * SurveySessionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurveySessionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Attempts to retrieve the SurveySession
     * which has a particular token.
     *
     * @param string $token
     *
     * @return SurveySession|null
     */
    public function getByToken($token)
    {
        $qb = $this->createQueryBuilder('ss')
            ->andWhere('ss.token = :token')
            ->setParameter('token',$token)
            ->setMaxResults(1);
        $q = $qb->getQuery();
        $arr = $q->getResult();
        if (count($arr) !== 1) return null;
        return $arr[0];
    }

    /**
     * Attempts to retrieve all SurveySession entities
     * which are not completed, have a certain number of
     * notifications, and whose last notification was sent
     * a certain amount of time ago.
     *
     * If the number of notifications is zero then the
     * time will be measured since checkout.
     *
     * If any SurveySession entity is encountered which lacks
     * a checkout time the created time shall be considered
     * in its place.
     *
     * @param int $count
     * @param DateInterval|null $since
     *
     * @return array
     */
    public function getByNotification($count, \DateInterval $since = null)
    {
        //  Sanity check arguments
        if ($count < 0) throw new \InvalidArgumentException(
            'Negative count'
        );
        //  Build query
        $qb = $this->createQueryBuilder('ss');
        $count_expr = $qb->expr()->count('sn.id');
        $having_count_expr = $qb->expr()->eq($count_expr,$count);
        $completed_expr = $qb->expr()->isNull('ss.completed');
        $qb->leftJoin('ss.surveyNotifications','sn')
            ->andWhere($completed_expr)
            ->addGroupBy('ss.id')
            ->andHaving($having_count_expr);

        //  Handle date/time constraint
        if (!is_null($since)) {
            //  Sanity check
            $now = new \DateTime();
            $when = clone $now;
            $when->sub($since);
            if (($when->getTimestamp() > $now->getTimestamp()) ) throw new \InvalidArgumentException(
                '$since is negative interval' 
            );
            //  Add to query
            if ($count === 0) {
                $since_expr = $qb->expr()->lte('COALESCE(ss.checkout,ss.created)',"'".\FanFerret\QuestionBundle\Utility\DateTime::toDoctrine($when)->format('Y-m-d H:i:s') ."'");
                $qb->andWhere($since_expr);
            } else {
                $max_expr = $qb->expr()->max('sn.sent');
                $having_max_expr = $qb->expr()->lte($max_expr,"'".\FanFerret\QuestionBundle\Utility\DateTime::toDoctrine($when)->format('Y-m-d H:i:s') ."'");
                $qb->andHaving($having_max_expr);
            }
            
        }
        $q = $qb->getQuery();
        return $q->getResult();
    }

    private function getBySurveyQueryBuilder(\FanFerret\QuestionBundle\Entity\Survey $survey)
    {
        $qb = $this->createQueryBuilder('ss');
        $where_expr = $qb->expr()->eq('s.id',':sid');
        $qb->innerJoin('ss.survey','s')
            ->andWhere($where_expr)
            ->setParameter('sid',$survey->getId());
        return $qb;
    }

    /**
     * Attempts to retrieve a page of SurveySession entities
     * from the data store.
     *
     * SurveySession entities shall be ordered by checkout date
     * with later checkout dates occurring first.  Should any
     * SurveySession entities be encountered which lack a checkout
     * date the created date shall be considered instead for the
     * purposes of ordering.
     *
     * @param Survey $survey
     *  The Survey entity whose SurveySession entities shall be
     *  retrieved.
     * @param Page $page
     *
     * @return array
     */
    public function getPage(\FanFerret\QuestionBundle\Entity\Survey $survey, \FanFerret\QuestionBundle\Utility\Page $page)
    {
        $qb = $this->getBySurveyQueryBuilder($survey);
        $qb->addSelect('COALESCE(ss.checkout,ss.created) AS HIDDEN columnOrder')
            ->orderBy('columnOrder','DESC');
        $page->addToQueryBuilder($qb);
        $q = $qb->getQuery();
        return $q->getResult();
    }

    /**
     * Attempts to determine which emails do not have an associated
     * SurveySession entity over a certain time period.
     *
     * @param Survey $survey
     * @param array $emails
     * @param DateTime|null $since
     *
     * @return array
     *  A collection of all the emails from \em emails which are not
     *  associated with a SurveySession entity over the time period
     *  beginning with \em since and ending at the present time.
     */
    public function getMissingEmails(\FanFerret\QuestionBundle\Entity\Survey $survey, array $emails, \DateTime $since = null)
    {
        $qb = $this->getBySurveyQueryBuilder($survey);
        $in_expr = $qb->expr()->in('ss.email',':emails');
        $qb->andWhere($in_expr)
            ->setParameter('emails',$emails);
        if (!is_null($since)) {
            $since_expr = $qb->expr()->gte('COALESCE(ss.checkout,ss.created)',':when');
            $qb->andWhere($since_expr)
                ->setParameter('when',\FanFerret\QuestionBundle\Utility\DateTime::toDoctrine($since));
        }
        $q = $qb->getQuery();
        $sessions = $q->getResult();
        $set = [];
        foreach ($emails as $email) $set[$email] = true;
        foreach ($sessions as $session) unset($set[$session->getEmail()]);
        return array_keys($set);
    }
}
