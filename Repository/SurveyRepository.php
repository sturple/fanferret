<?php

namespace FanFerret\QuestionBundle\Repository;

/**
 * SurveyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurveyRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Attempts to retrieve the Survey which has
     * a particular slug.
     *
     * @param array $slug
     *
     * @return Survey|null
     */
    public function getBySlug(array $slug)
    {
        $c = count($slug);
        if (($c < 2) || ($c > 3)) throw new \InvalidArgumentException(
            'Expected $slug to be at least 2 and at most 3 elements'
        );
        $qb = $this->createQueryBuilder('s');
        $i = ($c === 3) ? 1 : 0;
        $qb->leftJoin('s.property','p')
            ->leftJoin('p.group','g')
            ->andWhere($qb->expr()->eq('p.slug',':pslug'))
            ->andWhere($qb->expr()->eq('s.slug',':sslug'))
            ->setParameter('pslug',$slug[$i])
            ->setParameter('sslug',$slug[$i + 1]);
        if ($c === 3) {
            $qb->andWhere($qb->expr()->eq('g.slug',':gslug'))
                ->setParameter('gslug',$slug[0]);
        } else {
            $qb->andWhere($qb->expr()->isNull('g.slug'));
        }
        $q = $qb->getQuery();
        $arr = $q->getResult();
        if (count($arr) === 0) return null;
        if (count($arr) !== 1) throw new \RuntimeException('Expected slug to uniquely identify Survey entity');
        return $arr[0];
    }

    private function getByUserAll(\FanFerret\QuestionBundle\Utility\Page $page = null)
    {
        $qb = $this->createQueryBuilder('s');
        //  Joins necessary for proper ordering
        $qb->leftJoin('s.property','p')
            ->leftJoin('p.group','g')
            ->addSelect('TRIM(CONCAT(CONCAT(g.name,\' \'),CONCAT(CONCAT(p.name,\' \'),s.name))) AS HIDDEN orderBy')
            ->orderBy('orderBy','ASC');
        if (!is_null($page)) $page->addToQueryBuilder($qb);
        //  TODO: Order by?
        $q = $qb->getQuery();
        return $q->getResult();
    }

    private function getByUserNativeQueryText()
    {
        return 'SELECT
            `survey`.*,
            `property`.`name` AS `pname`,
            `group`.`name` AS `gname`
        FROM
            `acl`
            INNER JOIN `group` ON `acl`.`group_id` = `group`.`id`
            INNER JOIN `property` ON `property`.`group_id` = `group`.`id`
            INNER JOIN `survey` ON `survey`.`property_id` = `property`.`id`
        WHERE
            `acl`.`user_id` = ?
        UNION
        SELECT
            `survey`.*,
            `property`.`name` AS `pname`,
            `group`.`name` AS `gname`
        FROM
            `acl`
            INNER JOIN `property` ON `acl`.`property_id` = `property`.`id`
            INNER JOIN `survey` ON `survey`.`property_id` = `property`.`id`
            LEFT JOIN `group` ON `property`.`group_id` = `group`.`id`
        WHERE
            `acl`.`user_id` = ?
        UNION
        SELECT
            `survey`.*,
            `property`.`name` AS `pname`,
            `group`.`name` AS `gname`
        FROM
            `acl`
            INNER JOIN `survey` ON `acl`.`survey_id` = `survey`.`id`
            INNER JOIN `property` ON `survey`.`property_id` = `property`.`id`
            LEFT JOIN `group` ON `property`.`group_id` = `group`.`id`
        WHERE
            `acl`.`user_id` = ?';
    }

    private function addByUserNativeQueryParameters(\Doctrine\ORM\AbstractQuery $query, \FanFerret\QuestionBundle\Entity\User $user)
    {
        $id = $user->getId();
        return $query->setParameter(1,$id)
            ->setParameter(2,$id)
            ->setParameter(3,$id);
    }

    private function getByUserImpl(\FanFerret\QuestionBundle\Entity\User $user, \FanFerret\QuestionBundle\Utility\Page $page = null)
    {
        $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
        $rsm->addEntityResult(\FanFerret\QuestionBundle\Entity\Survey::class,'s')
            ->addFieldResult('s','id','id')
            ->addFieldResult('s','slug','slug')
            ->addFieldResult('s','params','params')
            ->addFieldResult('s','language','language')
            ->addMetaResult('s','property_id','property_id')
            ->addFieldResult('s','name','name');
        $sql = $this->getByUserNativeQueryText();
        $sql = sprintf(
            'SELECT *, CONCAT_WS(\' \',`gname`,`pname`,`name`) AS `orderBy` FROM (%s) `u` ORDER BY `orderBy`',
            $sql
        );
        if (!is_null($page)) {
            $sql .= ' LIMIT ?,?';
        }
        $em = $this->getEntityManager();
        $query = $em->createNativeQuery($sql,$rsm);
        $this->addByUserNativeQueryParameters($query,$user);
        if (!is_null($page)) {
            $query->setParameter(4,$page->getOffset())
                ->setParameter(5,$page->getResultsPerPage());
        }
        //  TODO: Order by?
        return $query->getResult();
    }

    private function getCountByUserAll()
    {
        $qb = $this->createQueryBuilder('s');
        $qb->select($qb->expr()->count('s.id'));
        $q = $qb->getQuery();
        return $q->getSingleScalarResult();
    }

    private function getCountByUserImpl(\FanFerret\QuestionBundle\Entity\User $user)
    {
        $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
        $rsm->addScalarResult('c','c');
        $sql = sprintf(
            'SELECT COUNT(`id`) AS `c` FROM (%s) `u`',
            $this->getByUserNativeQueryText()
        );
        $em = $this->getEntityManager();
        $query = $em->createNativeQuery($sql,$rsm);
        $this->addByUserNativeQueryParameters($query,$user);
        return $query->getSingleScalarResult();
    }

    /**
     * Attempts to retrieve all Survey entities on which
     * the User entity has permissions.
     *
     * @param User $user
     * @param Page|null $page
     *
     * @return array
     */
    public function getByUser(\FanFerret\QuestionBundle\Entity\User $user, \FanFerret\QuestionBundle\Utility\Page $page = null)
    {
        if ($user->hasRole('ROLE_ADMIN')) return $this->getByUserAll($page);
        return $this->getByUserImpl($user,$page);
    }

    public function getCountByUser(\FanFerret\QuestionBundle\Entity\User $user)
    {
        if ($user->hasRole('ROLE_ADMIN')) return $this->getCountByUserAll();
        return $this->getCountByUserImpl($user);
    }
}
